// Code generated by thriftgo (0.1.7). DO NOT EDIT.

package bytegraph

import (
	"bytes"
	"github.com/volcengine/vegraph-go-sdk/kitex_gen/base"
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type DirectionType int64

const (
	DirectionType_Forward DirectionType = 1
	DirectionType_Reverse DirectionType = 2
	DirectionType_Double  DirectionType = 3
)

func (p DirectionType) String() string {
	switch p {
	case DirectionType_Forward:
		return "Forward"
	case DirectionType_Reverse:
		return "Reverse"
	case DirectionType_Double:
		return "Double"
	}
	return "<UNSET>"
}

func DirectionTypeFromString(s string) (DirectionType, error) {
	switch s {
	case "Forward":
		return DirectionType_Forward, nil
	case "Reverse":
		return DirectionType_Reverse, nil
	case "Double":
		return DirectionType_Double, nil
	}
	return DirectionType(0), fmt.Errorf("not a valid DirectionType string")
}

func DirectionTypePtr(v DirectionType) *DirectionType { return &v }
func (p *DirectionType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DirectionType(result.Int64)
	return
}

func (p *DirectionType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ErrorCode int64

const (
	ErrorCode_SUCCESS                 ErrorCode = 0
	ErrorCode_SYSTEM_ERROR            ErrorCode = 1
	ErrorCode_UNKNOWN_ERROR           ErrorCode = 2
	ErrorCode_POINT_NOT_EXIST         ErrorCode = 3
	ErrorCode_EDGE_NOT_EXIST          ErrorCode = 4
	ErrorCode_RETRY                   ErrorCode = 5
	ErrorCode_TABLE_NOT_EXIST         ErrorCode = 6
	ErrorCode_INVALID_REQUEST         ErrorCode = 7
	ErrorCode_EDGE_ALREADY_EXIST      ErrorCode = 8
	ErrorCode_NOT_IMPLEMENTED         ErrorCode = 9
	ErrorCode_IO_TIMEOUT              ErrorCode = 10
	ErrorCode_UDF_NOT_FOUND           ErrorCode = 11
	ErrorCode_INDEX_OUT_OF_RANGE      ErrorCode = 12
	ErrorCode_SERVICE_OVERLOAD        ErrorCode = 13
	ErrorCode_EDGE_OVER_QUOTA         ErrorCode = 14
	ErrorCode_PART_OVER_QUOTA         ErrorCode = 15
	ErrorCode_SLAVE_WRITE_NOT_ALLOWED ErrorCode = 16
	ErrorCode_COMMIT_FAILED           ErrorCode = 17
	ErrorCode_KEY_IN_BLACKLIST        ErrorCode = 18
	ErrorCode_PSM_OVER_QUOTA          ErrorCode = 19
	ErrorCode_PROPERTY_VALUE_INVALID  ErrorCode = 20
	ErrorCode_PROPERTY_NOT_FOUND      ErrorCode = 21
	ErrorCode_GREMLIN_INVALID_QUERY   ErrorCode = 22
	ErrorCode_ELEM_NOT_EXIST          ErrorCode = 23
	ErrorCode_WRITE_STALL             ErrorCode = 24
	ErrorCode_TXN_CONFLICT            ErrorCode = 25
	ErrorCode_REJECTED_BY_HLC         ErrorCode = 26
	ErrorCode_AUTH_FAILED             ErrorCode = 27
	ErrorCode_NOT_SETED               ErrorCode = 255
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_SUCCESS:
		return "SUCCESS"
	case ErrorCode_SYSTEM_ERROR:
		return "SYSTEM_ERROR"
	case ErrorCode_UNKNOWN_ERROR:
		return "UNKNOWN_ERROR"
	case ErrorCode_POINT_NOT_EXIST:
		return "POINT_NOT_EXIST"
	case ErrorCode_EDGE_NOT_EXIST:
		return "EDGE_NOT_EXIST"
	case ErrorCode_RETRY:
		return "RETRY"
	case ErrorCode_TABLE_NOT_EXIST:
		return "TABLE_NOT_EXIST"
	case ErrorCode_INVALID_REQUEST:
		return "INVALID_REQUEST"
	case ErrorCode_EDGE_ALREADY_EXIST:
		return "EDGE_ALREADY_EXIST"
	case ErrorCode_NOT_IMPLEMENTED:
		return "NOT_IMPLEMENTED"
	case ErrorCode_IO_TIMEOUT:
		return "IO_TIMEOUT"
	case ErrorCode_UDF_NOT_FOUND:
		return "UDF_NOT_FOUND"
	case ErrorCode_INDEX_OUT_OF_RANGE:
		return "INDEX_OUT_OF_RANGE"
	case ErrorCode_SERVICE_OVERLOAD:
		return "SERVICE_OVERLOAD"
	case ErrorCode_EDGE_OVER_QUOTA:
		return "EDGE_OVER_QUOTA"
	case ErrorCode_PART_OVER_QUOTA:
		return "PART_OVER_QUOTA"
	case ErrorCode_SLAVE_WRITE_NOT_ALLOWED:
		return "SLAVE_WRITE_NOT_ALLOWED"
	case ErrorCode_COMMIT_FAILED:
		return "COMMIT_FAILED"
	case ErrorCode_KEY_IN_BLACKLIST:
		return "KEY_IN_BLACKLIST"
	case ErrorCode_PSM_OVER_QUOTA:
		return "PSM_OVER_QUOTA"
	case ErrorCode_PROPERTY_VALUE_INVALID:
		return "PROPERTY_VALUE_INVALID"
	case ErrorCode_PROPERTY_NOT_FOUND:
		return "PROPERTY_NOT_FOUND"
	case ErrorCode_GREMLIN_INVALID_QUERY:
		return "GREMLIN_INVALID_QUERY"
	case ErrorCode_ELEM_NOT_EXIST:
		return "ELEM_NOT_EXIST"
	case ErrorCode_WRITE_STALL:
		return "WRITE_STALL"
	case ErrorCode_TXN_CONFLICT:
		return "TXN_CONFLICT"
	case ErrorCode_REJECTED_BY_HLC:
		return "REJECTED_BY_HLC"
	case ErrorCode_AUTH_FAILED:
		return "AUTH_FAILED"
	case ErrorCode_NOT_SETED:
		return "NOT_SETED"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "SUCCESS":
		return ErrorCode_SUCCESS, nil
	case "SYSTEM_ERROR":
		return ErrorCode_SYSTEM_ERROR, nil
	case "UNKNOWN_ERROR":
		return ErrorCode_UNKNOWN_ERROR, nil
	case "POINT_NOT_EXIST":
		return ErrorCode_POINT_NOT_EXIST, nil
	case "EDGE_NOT_EXIST":
		return ErrorCode_EDGE_NOT_EXIST, nil
	case "RETRY":
		return ErrorCode_RETRY, nil
	case "TABLE_NOT_EXIST":
		return ErrorCode_TABLE_NOT_EXIST, nil
	case "INVALID_REQUEST":
		return ErrorCode_INVALID_REQUEST, nil
	case "EDGE_ALREADY_EXIST":
		return ErrorCode_EDGE_ALREADY_EXIST, nil
	case "NOT_IMPLEMENTED":
		return ErrorCode_NOT_IMPLEMENTED, nil
	case "IO_TIMEOUT":
		return ErrorCode_IO_TIMEOUT, nil
	case "UDF_NOT_FOUND":
		return ErrorCode_UDF_NOT_FOUND, nil
	case "INDEX_OUT_OF_RANGE":
		return ErrorCode_INDEX_OUT_OF_RANGE, nil
	case "SERVICE_OVERLOAD":
		return ErrorCode_SERVICE_OVERLOAD, nil
	case "EDGE_OVER_QUOTA":
		return ErrorCode_EDGE_OVER_QUOTA, nil
	case "PART_OVER_QUOTA":
		return ErrorCode_PART_OVER_QUOTA, nil
	case "SLAVE_WRITE_NOT_ALLOWED":
		return ErrorCode_SLAVE_WRITE_NOT_ALLOWED, nil
	case "COMMIT_FAILED":
		return ErrorCode_COMMIT_FAILED, nil
	case "KEY_IN_BLACKLIST":
		return ErrorCode_KEY_IN_BLACKLIST, nil
	case "PSM_OVER_QUOTA":
		return ErrorCode_PSM_OVER_QUOTA, nil
	case "PROPERTY_VALUE_INVALID":
		return ErrorCode_PROPERTY_VALUE_INVALID, nil
	case "PROPERTY_NOT_FOUND":
		return ErrorCode_PROPERTY_NOT_FOUND, nil
	case "GREMLIN_INVALID_QUERY":
		return ErrorCode_GREMLIN_INVALID_QUERY, nil
	case "ELEM_NOT_EXIST":
		return ErrorCode_ELEM_NOT_EXIST, nil
	case "WRITE_STALL":
		return ErrorCode_WRITE_STALL, nil
	case "TXN_CONFLICT":
		return ErrorCode_TXN_CONFLICT, nil
	case "REJECTED_BY_HLC":
		return ErrorCode_REJECTED_BY_HLC, nil
	case "AUTH_FAILED":
		return ErrorCode_AUTH_FAILED, nil
	case "NOT_SETED":
		return ErrorCode_NOT_SETED, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }
func (p *ErrorCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ErrorCode(result.Int64)
	return
}

func (p *ErrorCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ClientProtocol int64

const (
	ClientProtocol_Binary     ClientProtocol = 0
	ClientProtocol_ColumnarV1 ClientProtocol = 1
)

func (p ClientProtocol) String() string {
	switch p {
	case ClientProtocol_Binary:
		return "Binary"
	case ClientProtocol_ColumnarV1:
		return "ColumnarV1"
	}
	return "<UNSET>"
}

func ClientProtocolFromString(s string) (ClientProtocol, error) {
	switch s {
	case "Binary":
		return ClientProtocol_Binary, nil
	case "ColumnarV1":
		return ClientProtocol_ColumnarV1, nil
	}
	return ClientProtocol(0), fmt.Errorf("not a valid ClientProtocol string")
}

func ClientProtocolPtr(v ClientProtocol) *ClientProtocol { return &v }
func (p *ClientProtocol) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ClientProtocol(result.Int64)
	return
}

func (p *ClientProtocol) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Value struct {
	BoolValue   *bool    `thrift:"bool_value,1,optional" json:"bool_value,omitempty"`
	IntValue    *int32   `thrift:"int_value,2,optional" json:"int_value,omitempty"`
	Int64Value  *int64   `thrift:"int64_value,3,optional" json:"int64_value,omitempty"`
	FloatValue  *float64 `thrift:"float_value,4,optional" json:"float_value,omitempty"`
	DoubleValue *float64 `thrift:"double_value,5,optional" json:"double_value,omitempty"`
	StringValue []byte   `thrift:"string_value,6,optional" json:"string_value,omitempty"`
}

func NewValue() *Value {
	return &Value{}
}

var Value_BoolValue_DEFAULT bool

func (p *Value) GetBoolValue() (v bool) {
	if !p.IsSetBoolValue() {
		return Value_BoolValue_DEFAULT
	}
	return *p.BoolValue
}

var Value_IntValue_DEFAULT int32

func (p *Value) GetIntValue() (v int32) {
	if !p.IsSetIntValue() {
		return Value_IntValue_DEFAULT
	}
	return *p.IntValue
}

var Value_Int64Value_DEFAULT int64

func (p *Value) GetInt64Value() (v int64) {
	if !p.IsSetInt64Value() {
		return Value_Int64Value_DEFAULT
	}
	return *p.Int64Value
}

var Value_FloatValue_DEFAULT float64

func (p *Value) GetFloatValue() (v float64) {
	if !p.IsSetFloatValue() {
		return Value_FloatValue_DEFAULT
	}
	return *p.FloatValue
}

var Value_DoubleValue_DEFAULT float64

func (p *Value) GetDoubleValue() (v float64) {
	if !p.IsSetDoubleValue() {
		return Value_DoubleValue_DEFAULT
	}
	return *p.DoubleValue
}

var Value_StringValue_DEFAULT []byte

func (p *Value) GetStringValue() (v []byte) {
	if !p.IsSetStringValue() {
		return Value_StringValue_DEFAULT
	}
	return p.StringValue
}
func (p *Value) SetBoolValue(val *bool) {
	p.BoolValue = val
}
func (p *Value) SetIntValue(val *int32) {
	p.IntValue = val
}
func (p *Value) SetInt64Value(val *int64) {
	p.Int64Value = val
}
func (p *Value) SetFloatValue(val *float64) {
	p.FloatValue = val
}
func (p *Value) SetDoubleValue(val *float64) {
	p.DoubleValue = val
}
func (p *Value) SetStringValue(val []byte) {
	p.StringValue = val
}

var fieldIDToName_Value = map[int16]string{
	1: "bool_value",
	2: "int_value",
	3: "int64_value",
	4: "float_value",
	5: "double_value",
	6: "string_value",
}

func (p *Value) IsSetBoolValue() bool {
	return p.BoolValue != nil
}

func (p *Value) IsSetIntValue() bool {
	return p.IntValue != nil
}

func (p *Value) IsSetInt64Value() bool {
	return p.Int64Value != nil
}

func (p *Value) IsSetFloatValue() bool {
	return p.FloatValue != nil
}

func (p *Value) IsSetDoubleValue() bool {
	return p.DoubleValue != nil
}

func (p *Value) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *Value) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Value[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Value) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.BoolValue = &v
	}
	return nil
}

func (p *Value) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.IntValue = &v
	}
	return nil
}

func (p *Value) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Int64Value = &v
	}
	return nil
}

func (p *Value) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.FloatValue = &v
	}
	return nil
}

func (p *Value) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.DoubleValue = &v
	}
	return nil
}

func (p *Value) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.StringValue = []byte(v)
	}
	return nil
}

func (p *Value) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Value"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Value) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolValue() {
		if err = oprot.WriteFieldBegin("bool_value", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.BoolValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Value) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntValue() {
		if err = oprot.WriteFieldBegin("int_value", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.IntValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Value) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt64Value() {
		if err = oprot.WriteFieldBegin("int64_value", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Int64Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Value) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFloatValue() {
		if err = oprot.WriteFieldBegin("float_value", thrift.DOUBLE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.FloatValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Value) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleValue() {
		if err = oprot.WriteFieldBegin("double_value", thrift.DOUBLE, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.DoubleValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Value) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue() {
		if err = oprot.WriteFieldBegin("string_value", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.StringValue)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Value) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Value(%+v)", *p)
}

func (p *Value) DeepEqual(ano *Value) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BoolValue) {
		return false
	}
	if !p.Field2DeepEqual(ano.IntValue) {
		return false
	}
	if !p.Field3DeepEqual(ano.Int64Value) {
		return false
	}
	if !p.Field4DeepEqual(ano.FloatValue) {
		return false
	}
	if !p.Field5DeepEqual(ano.DoubleValue) {
		return false
	}
	if !p.Field6DeepEqual(ano.StringValue) {
		return false
	}
	return true
}

func (p *Value) Field1DeepEqual(src *bool) bool {

	if p.BoolValue == src {
		return true
	} else if p.BoolValue == nil || src == nil {
		return false
	}
	if *p.BoolValue != *src {
		return false
	}
	return true
}
func (p *Value) Field2DeepEqual(src *int32) bool {

	if p.IntValue == src {
		return true
	} else if p.IntValue == nil || src == nil {
		return false
	}
	if *p.IntValue != *src {
		return false
	}
	return true
}
func (p *Value) Field3DeepEqual(src *int64) bool {

	if p.Int64Value == src {
		return true
	} else if p.Int64Value == nil || src == nil {
		return false
	}
	if *p.Int64Value != *src {
		return false
	}
	return true
}
func (p *Value) Field4DeepEqual(src *float64) bool {

	if p.FloatValue == src {
		return true
	} else if p.FloatValue == nil || src == nil {
		return false
	}
	if *p.FloatValue != *src {
		return false
	}
	return true
}
func (p *Value) Field5DeepEqual(src *float64) bool {

	if p.DoubleValue == src {
		return true
	} else if p.DoubleValue == nil || src == nil {
		return false
	}
	if *p.DoubleValue != *src {
		return false
	}
	return true
}
func (p *Value) Field6DeepEqual(src []byte) bool {

	if bytes.Compare(p.StringValue, src) != 0 {
		return false
	}
	return true
}

type GremlinQueryRequest struct {
	Table            string              `thrift:"table,1" json:"table"`
	Query            string              `thrift:"query,2" json:"query"`
	Queries          []string            `thrift:"queries,3" json:"queries"`
	Templates        []string            `thrift:"templates,4" json:"templates"`
	Parameters       []map[string]*Value `thrift:"parameters,5" json:"parameters"`
	BinaryParameters []map[string][]byte `thrift:"binary_parameters,6" json:"binary_parameters"`
	UseBinary        bool                `thrift:"useBinary,7" json:"useBinary"`
	Compression      bool                `thrift:"compression,8" json:"compression"`
	ExpectProtocol   ClientProtocol      `thrift:"expect_protocol,9" json:"expect_protocol"`
	Base             *base.Base          `thrift:"Base,255,optional" json:"Base,omitempty"`
}

func NewGremlinQueryRequest() *GremlinQueryRequest {
	return &GremlinQueryRequest{}
}

func (p *GremlinQueryRequest) GetTable() (v string) {
	return p.Table
}

func (p *GremlinQueryRequest) GetQuery() (v string) {
	return p.Query
}

func (p *GremlinQueryRequest) GetQueries() (v []string) {
	return p.Queries
}

func (p *GremlinQueryRequest) GetTemplates() (v []string) {
	return p.Templates
}

func (p *GremlinQueryRequest) GetParameters() (v []map[string]*Value) {
	return p.Parameters
}

func (p *GremlinQueryRequest) GetBinaryParameters() (v []map[string][]byte) {
	return p.BinaryParameters
}

func (p *GremlinQueryRequest) GetUseBinary() (v bool) {
	return p.UseBinary
}

func (p *GremlinQueryRequest) GetCompression() (v bool) {
	return p.Compression
}

func (p *GremlinQueryRequest) GetExpectProtocol() (v ClientProtocol) {
	return p.ExpectProtocol
}

var GremlinQueryRequest_Base_DEFAULT *base.Base

func (p *GremlinQueryRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GremlinQueryRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GremlinQueryRequest) SetTable(val string) {
	p.Table = val
}
func (p *GremlinQueryRequest) SetQuery(val string) {
	p.Query = val
}
func (p *GremlinQueryRequest) SetQueries(val []string) {
	p.Queries = val
}
func (p *GremlinQueryRequest) SetTemplates(val []string) {
	p.Templates = val
}
func (p *GremlinQueryRequest) SetParameters(val []map[string]*Value) {
	p.Parameters = val
}
func (p *GremlinQueryRequest) SetBinaryParameters(val []map[string][]byte) {
	p.BinaryParameters = val
}
func (p *GremlinQueryRequest) SetUseBinary(val bool) {
	p.UseBinary = val
}
func (p *GremlinQueryRequest) SetCompression(val bool) {
	p.Compression = val
}
func (p *GremlinQueryRequest) SetExpectProtocol(val ClientProtocol) {
	p.ExpectProtocol = val
}
func (p *GremlinQueryRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GremlinQueryRequest = map[int16]string{
	1:   "table",
	2:   "query",
	3:   "queries",
	4:   "templates",
	5:   "parameters",
	6:   "binary_parameters",
	7:   "useBinary",
	8:   "compression",
	9:   "expect_protocol",
	255: "Base",
}

func (p *GremlinQueryRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GremlinQueryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GremlinQueryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GremlinQueryRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Table = v
	}
	return nil
}

func (p *GremlinQueryRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Query = v
	}
	return nil
}

func (p *GremlinQueryRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Queries = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Queries = append(p.Queries, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Templates = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Templates = append(p.Templates, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Parameters = make([]map[string]*Value, 0, size)
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_elem := make(map[string]*Value, size)
		for i := 0; i < size; i++ {
			var _key string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_key = v
			}
			_val := NewValue()
			if err := _val.Read(iprot); err != nil {
				return err
			}

			_elem[_key] = _val
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.Parameters = append(p.Parameters, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BinaryParameters = make([]map[string][]byte, 0, size)
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_elem := make(map[string][]byte, size)
		for i := 0; i < size; i++ {
			var _key string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_key = v
			}

			var _val []byte
			if v, err := iprot.ReadBinary(); err != nil {
				return err
			} else {
				_val = []byte(v)
			}

			_elem[_key] = _val
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.BinaryParameters = append(p.BinaryParameters, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.UseBinary = v
	}
	return nil
}

func (p *GremlinQueryRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Compression = v
	}
	return nil
}

func (p *GremlinQueryRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ExpectProtocol = ClientProtocol(v)
	}
	return nil
}

func (p *GremlinQueryRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GremlinQueryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Table); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Query); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("queries", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Queries)); err != nil {
		return err
	}
	for _, v := range p.Queries {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("templates", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Templates)); err != nil {
		return err
	}
	for _, v := range p.Templates {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("parameters", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.MAP, len(p.Parameters)); err != nil {
		return err
	}
	for _, v := range p.Parameters {
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("binary_parameters", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.MAP, len(p.BinaryParameters)); err != nil {
		return err
	}
	for _, v := range p.BinaryParameters {
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteBinary([]byte(v)); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("useBinary", thrift.BOOL, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.UseBinary); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("compression", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Compression); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expect_protocol", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ExpectProtocol)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GremlinQueryRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GremlinQueryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GremlinQueryRequest(%+v)", *p)
}

func (p *GremlinQueryRequest) DeepEqual(ano *GremlinQueryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Table) {
		return false
	}
	if !p.Field2DeepEqual(ano.Query) {
		return false
	}
	if !p.Field3DeepEqual(ano.Queries) {
		return false
	}
	if !p.Field4DeepEqual(ano.Templates) {
		return false
	}
	if !p.Field5DeepEqual(ano.Parameters) {
		return false
	}
	if !p.Field6DeepEqual(ano.BinaryParameters) {
		return false
	}
	if !p.Field7DeepEqual(ano.UseBinary) {
		return false
	}
	if !p.Field8DeepEqual(ano.Compression) {
		return false
	}
	if !p.Field9DeepEqual(ano.ExpectProtocol) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GremlinQueryRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Table, src) != 0 {
		return false
	}
	return true
}
func (p *GremlinQueryRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Query, src) != 0 {
		return false
	}
	return true
}
func (p *GremlinQueryRequest) Field3DeepEqual(src []string) bool {

	if len(p.Queries) != len(src) {
		return false
	}
	for i, v := range p.Queries {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GremlinQueryRequest) Field4DeepEqual(src []string) bool {

	if len(p.Templates) != len(src) {
		return false
	}
	for i, v := range p.Templates {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GremlinQueryRequest) Field5DeepEqual(src []map[string]*Value) bool {

	if len(p.Parameters) != len(src) {
		return false
	}
	for i, v := range p.Parameters {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}
func (p *GremlinQueryRequest) Field6DeepEqual(src []map[string][]byte) bool {

	if len(p.BinaryParameters) != len(src) {
		return false
	}
	for i, v := range p.BinaryParameters {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if bytes.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *GremlinQueryRequest) Field7DeepEqual(src bool) bool {

	if p.UseBinary != src {
		return false
	}
	return true
}
func (p *GremlinQueryRequest) Field8DeepEqual(src bool) bool {

	if p.Compression != src {
		return false
	}
	return true
}
func (p *GremlinQueryRequest) Field9DeepEqual(src ClientProtocol) bool {

	if p.ExpectProtocol != src {
		return false
	}
	return true
}
func (p *GremlinQueryRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GremlinQueryResponse struct {
	ErrCode        ErrorCode      `thrift:"errCode,1" json:"errCode"`
	Desc           string         `thrift:"desc,2" json:"desc"`
	RetPB          []byte         `thrift:"retPB,3" json:"retPB"`
	BatchRet       [][]byte       `thrift:"batchRet,4" json:"batchRet"`
	BatchDesc      []string       `thrift:"batchDesc,5" json:"batchDesc"`
	BatchErrCode   []ErrorCode    `thrift:"batchErrCode,6" json:"batchErrCode"`
	BatchBinaryRet [][]byte       `thrift:"batchBinaryRet,7" json:"batchBinaryRet"`
	TxnIds         []string       `thrift:"txnIds,8,optional" json:"txnIds,omitempty"`
	TxnTss         []int64        `thrift:"txnTss,9,optional" json:"txnTss,omitempty"`
	TxnId          *string        `thrift:"txnId,10,optional" json:"txnId,omitempty"`
	TxnTs          *int64         `thrift:"txnTs,11,optional" json:"txnTs,omitempty"`
	Costs          []int64        `thrift:"costs,12,optional" json:"costs,omitempty"`
	BaseResp       *base.BaseResp `thrift:"BaseResp,255,optional" json:"BaseResp,omitempty"`
}

func NewGremlinQueryResponse() *GremlinQueryResponse {
	return &GremlinQueryResponse{}
}

func (p *GremlinQueryResponse) GetErrCode() (v ErrorCode) {
	return p.ErrCode
}

func (p *GremlinQueryResponse) GetDesc() (v string) {
	return p.Desc
}

func (p *GremlinQueryResponse) GetRetPB() (v []byte) {
	return p.RetPB
}

func (p *GremlinQueryResponse) GetBatchRet() (v [][]byte) {
	return p.BatchRet
}

func (p *GremlinQueryResponse) GetBatchDesc() (v []string) {
	return p.BatchDesc
}

func (p *GremlinQueryResponse) GetBatchErrCode() (v []ErrorCode) {
	return p.BatchErrCode
}

func (p *GremlinQueryResponse) GetBatchBinaryRet() (v [][]byte) {
	return p.BatchBinaryRet
}

var GremlinQueryResponse_TxnIds_DEFAULT []string

func (p *GremlinQueryResponse) GetTxnIds() (v []string) {
	if !p.IsSetTxnIds() {
		return GremlinQueryResponse_TxnIds_DEFAULT
	}
	return p.TxnIds
}

var GremlinQueryResponse_TxnTss_DEFAULT []int64

func (p *GremlinQueryResponse) GetTxnTss() (v []int64) {
	if !p.IsSetTxnTss() {
		return GremlinQueryResponse_TxnTss_DEFAULT
	}
	return p.TxnTss
}

var GremlinQueryResponse_TxnId_DEFAULT string

func (p *GremlinQueryResponse) GetTxnId() (v string) {
	if !p.IsSetTxnId() {
		return GremlinQueryResponse_TxnId_DEFAULT
	}
	return *p.TxnId
}

var GremlinQueryResponse_TxnTs_DEFAULT int64

func (p *GremlinQueryResponse) GetTxnTs() (v int64) {
	if !p.IsSetTxnTs() {
		return GremlinQueryResponse_TxnTs_DEFAULT
	}
	return *p.TxnTs
}

var GremlinQueryResponse_Costs_DEFAULT []int64

func (p *GremlinQueryResponse) GetCosts() (v []int64) {
	if !p.IsSetCosts() {
		return GremlinQueryResponse_Costs_DEFAULT
	}
	return p.Costs
}

var GremlinQueryResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GremlinQueryResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GremlinQueryResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GremlinQueryResponse) SetErrCode(val ErrorCode) {
	p.ErrCode = val
}
func (p *GremlinQueryResponse) SetDesc(val string) {
	p.Desc = val
}
func (p *GremlinQueryResponse) SetRetPB(val []byte) {
	p.RetPB = val
}
func (p *GremlinQueryResponse) SetBatchRet(val [][]byte) {
	p.BatchRet = val
}
func (p *GremlinQueryResponse) SetBatchDesc(val []string) {
	p.BatchDesc = val
}
func (p *GremlinQueryResponse) SetBatchErrCode(val []ErrorCode) {
	p.BatchErrCode = val
}
func (p *GremlinQueryResponse) SetBatchBinaryRet(val [][]byte) {
	p.BatchBinaryRet = val
}
func (p *GremlinQueryResponse) SetTxnIds(val []string) {
	p.TxnIds = val
}
func (p *GremlinQueryResponse) SetTxnTss(val []int64) {
	p.TxnTss = val
}
func (p *GremlinQueryResponse) SetTxnId(val *string) {
	p.TxnId = val
}
func (p *GremlinQueryResponse) SetTxnTs(val *int64) {
	p.TxnTs = val
}
func (p *GremlinQueryResponse) SetCosts(val []int64) {
	p.Costs = val
}
func (p *GremlinQueryResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GremlinQueryResponse = map[int16]string{
	1:   "errCode",
	2:   "desc",
	3:   "retPB",
	4:   "batchRet",
	5:   "batchDesc",
	6:   "batchErrCode",
	7:   "batchBinaryRet",
	8:   "txnIds",
	9:   "txnTss",
	10:  "txnId",
	11:  "txnTs",
	12:  "costs",
	255: "BaseResp",
}

func (p *GremlinQueryResponse) IsSetTxnIds() bool {
	return p.TxnIds != nil
}

func (p *GremlinQueryResponse) IsSetTxnTss() bool {
	return p.TxnTss != nil
}

func (p *GremlinQueryResponse) IsSetTxnId() bool {
	return p.TxnId != nil
}

func (p *GremlinQueryResponse) IsSetTxnTs() bool {
	return p.TxnTs != nil
}

func (p *GremlinQueryResponse) IsSetCosts() bool {
	return p.Costs != nil
}

func (p *GremlinQueryResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GremlinQueryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GremlinQueryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GremlinQueryResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ErrCode = ErrorCode(v)
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Desc = v
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.RetPB = []byte(v)
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BatchRet = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return err
		} else {
			_elem = []byte(v)
		}

		p.BatchRet = append(p.BatchRet, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BatchDesc = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.BatchDesc = append(p.BatchDesc, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BatchErrCode = make([]ErrorCode, 0, size)
	for i := 0; i < size; i++ {
		var _elem ErrorCode
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = ErrorCode(v)
		}

		p.BatchErrCode = append(p.BatchErrCode, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BatchBinaryRet = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return err
		} else {
			_elem = []byte(v)
		}

		p.BatchBinaryRet = append(p.BatchBinaryRet, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.TxnIds = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.TxnIds = append(p.TxnIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.TxnTss = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.TxnTss = append(p.TxnTss, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TxnId = &v
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TxnTs = &v
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Costs = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Costs = append(p.Costs, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GremlinQueryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GremlinQueryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("errCode", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.ErrCode)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Desc); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("retPB", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.RetPB)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("batchRet", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BatchRet)); err != nil {
		return err
	}
	for _, v := range p.BatchRet {
		if err := oprot.WriteBinary([]byte(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("batchDesc", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BatchDesc)); err != nil {
		return err
	}
	for _, v := range p.BatchDesc {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("batchErrCode", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.BatchErrCode)); err != nil {
		return err
	}
	for _, v := range p.BatchErrCode {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("batchBinaryRet", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BatchBinaryRet)); err != nil {
		return err
	}
	for _, v := range p.BatchBinaryRet {
		if err := oprot.WriteBinary([]byte(v)); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnIds() {
		if err = oprot.WriteFieldBegin("txnIds", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.TxnIds)); err != nil {
			return err
		}
		for _, v := range p.TxnIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnTss() {
		if err = oprot.WriteFieldBegin("txnTss", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.TxnTss)); err != nil {
			return err
		}
		for _, v := range p.TxnTss {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnId() {
		if err = oprot.WriteFieldBegin("txnId", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TxnId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTxnTs() {
		if err = oprot.WriteFieldBegin("txnTs", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TxnTs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCosts() {
		if err = oprot.WriteFieldBegin("costs", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Costs)); err != nil {
			return err
		}
		for _, v := range p.Costs {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GremlinQueryResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GremlinQueryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GremlinQueryResponse(%+v)", *p)
}

func (p *GremlinQueryResponse) DeepEqual(ano *GremlinQueryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ErrCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field3DeepEqual(ano.RetPB) {
		return false
	}
	if !p.Field4DeepEqual(ano.BatchRet) {
		return false
	}
	if !p.Field5DeepEqual(ano.BatchDesc) {
		return false
	}
	if !p.Field6DeepEqual(ano.BatchErrCode) {
		return false
	}
	if !p.Field7DeepEqual(ano.BatchBinaryRet) {
		return false
	}
	if !p.Field8DeepEqual(ano.TxnIds) {
		return false
	}
	if !p.Field9DeepEqual(ano.TxnTss) {
		return false
	}
	if !p.Field10DeepEqual(ano.TxnId) {
		return false
	}
	if !p.Field11DeepEqual(ano.TxnTs) {
		return false
	}
	if !p.Field12DeepEqual(ano.Costs) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GremlinQueryResponse) Field1DeepEqual(src ErrorCode) bool {

	if p.ErrCode != src {
		return false
	}
	return true
}
func (p *GremlinQueryResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Desc, src) != 0 {
		return false
	}
	return true
}
func (p *GremlinQueryResponse) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.RetPB, src) != 0 {
		return false
	}
	return true
}
func (p *GremlinQueryResponse) Field4DeepEqual(src [][]byte) bool {

	if len(p.BatchRet) != len(src) {
		return false
	}
	for i, v := range p.BatchRet {
		_src := src[i]
		if bytes.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GremlinQueryResponse) Field5DeepEqual(src []string) bool {

	if len(p.BatchDesc) != len(src) {
		return false
	}
	for i, v := range p.BatchDesc {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GremlinQueryResponse) Field6DeepEqual(src []ErrorCode) bool {

	if len(p.BatchErrCode) != len(src) {
		return false
	}
	for i, v := range p.BatchErrCode {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *GremlinQueryResponse) Field7DeepEqual(src [][]byte) bool {

	if len(p.BatchBinaryRet) != len(src) {
		return false
	}
	for i, v := range p.BatchBinaryRet {
		_src := src[i]
		if bytes.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GremlinQueryResponse) Field8DeepEqual(src []string) bool {

	if len(p.TxnIds) != len(src) {
		return false
	}
	for i, v := range p.TxnIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GremlinQueryResponse) Field9DeepEqual(src []int64) bool {

	if len(p.TxnTss) != len(src) {
		return false
	}
	for i, v := range p.TxnTss {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *GremlinQueryResponse) Field10DeepEqual(src *string) bool {

	if p.TxnId == src {
		return true
	} else if p.TxnId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TxnId, *src) != 0 {
		return false
	}
	return true
}
func (p *GremlinQueryResponse) Field11DeepEqual(src *int64) bool {

	if p.TxnTs == src {
		return true
	} else if p.TxnTs == nil || src == nil {
		return false
	}
	if *p.TxnTs != *src {
		return false
	}
	return true
}
func (p *GremlinQueryResponse) Field12DeepEqual(src []int64) bool {

	if len(p.Costs) != len(src) {
		return false
	}
	for i, v := range p.Costs {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *GremlinQueryResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ByteGraphService interface {
	GremlinQuery(ctx context.Context, req *GremlinQueryRequest) (r *GremlinQueryResponse, err error)
}

type ByteGraphServiceClient struct {
	c thrift.TClient
}

func NewByteGraphServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ByteGraphServiceClient {
	return &ByteGraphServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewByteGraphServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ByteGraphServiceClient {
	return &ByteGraphServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewByteGraphServiceClient(c thrift.TClient) *ByteGraphServiceClient {
	return &ByteGraphServiceClient{
		c: c,
	}
}

func (p *ByteGraphServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ByteGraphServiceClient) GremlinQuery(ctx context.Context, req *GremlinQueryRequest) (r *GremlinQueryResponse, err error) {
	var _args ByteGraphServiceGremlinQueryArgs
	_args.Req = req
	var _result ByteGraphServiceGremlinQueryResult
	if err = p.Client_().Call(ctx, "GremlinQuery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ByteGraphServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ByteGraphService
}

func (p *ByteGraphServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ByteGraphServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ByteGraphServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewByteGraphServiceProcessor(handler ByteGraphService) *ByteGraphServiceProcessor {
	self := &ByteGraphServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GremlinQuery", &byteGraphServiceProcessorGremlinQuery{handler: handler})
	return self
}
func (p *ByteGraphServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type byteGraphServiceProcessorGremlinQuery struct {
	handler ByteGraphService
}

func (p *byteGraphServiceProcessorGremlinQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ByteGraphServiceGremlinQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GremlinQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ByteGraphServiceGremlinQueryResult{}
	var retval *GremlinQueryResponse
	if retval, err2 = p.handler.GremlinQuery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GremlinQuery: "+err2.Error())
		oprot.WriteMessageBegin("GremlinQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GremlinQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ByteGraphServiceGremlinQueryArgs struct {
	Req *GremlinQueryRequest `thrift:"req,1" json:"req"`
}

func NewByteGraphServiceGremlinQueryArgs() *ByteGraphServiceGremlinQueryArgs {
	return &ByteGraphServiceGremlinQueryArgs{}
}

var ByteGraphServiceGremlinQueryArgs_Req_DEFAULT *GremlinQueryRequest

func (p *ByteGraphServiceGremlinQueryArgs) GetReq() (v *GremlinQueryRequest) {
	if !p.IsSetReq() {
		return ByteGraphServiceGremlinQueryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ByteGraphServiceGremlinQueryArgs) SetReq(val *GremlinQueryRequest) {
	p.Req = val
}

var fieldIDToName_ByteGraphServiceGremlinQueryArgs = map[int16]string{
	1: "req",
}

func (p *ByteGraphServiceGremlinQueryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ByteGraphServiceGremlinQueryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ByteGraphServiceGremlinQueryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ByteGraphServiceGremlinQueryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGremlinQueryRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ByteGraphServiceGremlinQueryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GremlinQuery_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ByteGraphServiceGremlinQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ByteGraphServiceGremlinQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ByteGraphServiceGremlinQueryArgs(%+v)", *p)
}

func (p *ByteGraphServiceGremlinQueryArgs) DeepEqual(ano *ByteGraphServiceGremlinQueryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ByteGraphServiceGremlinQueryArgs) Field1DeepEqual(src *GremlinQueryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ByteGraphServiceGremlinQueryResult struct {
	Success *GremlinQueryResponse `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewByteGraphServiceGremlinQueryResult() *ByteGraphServiceGremlinQueryResult {
	return &ByteGraphServiceGremlinQueryResult{}
}

var ByteGraphServiceGremlinQueryResult_Success_DEFAULT *GremlinQueryResponse

func (p *ByteGraphServiceGremlinQueryResult) GetSuccess() (v *GremlinQueryResponse) {
	if !p.IsSetSuccess() {
		return ByteGraphServiceGremlinQueryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ByteGraphServiceGremlinQueryResult) SetSuccess(x interface{}) {
	p.Success = x.(*GremlinQueryResponse)
}

var fieldIDToName_ByteGraphServiceGremlinQueryResult = map[int16]string{
	0: "success",
}

func (p *ByteGraphServiceGremlinQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ByteGraphServiceGremlinQueryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ByteGraphServiceGremlinQueryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ByteGraphServiceGremlinQueryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGremlinQueryResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ByteGraphServiceGremlinQueryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GremlinQuery_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ByteGraphServiceGremlinQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ByteGraphServiceGremlinQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ByteGraphServiceGremlinQueryResult(%+v)", *p)
}

func (p *ByteGraphServiceGremlinQueryResult) DeepEqual(ano *ByteGraphServiceGremlinQueryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ByteGraphServiceGremlinQueryResult) Field0DeepEqual(src *GremlinQueryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
